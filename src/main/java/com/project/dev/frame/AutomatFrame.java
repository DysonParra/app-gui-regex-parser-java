/*
 * @fileoverview {AutomatFrame} se encarga de realizar tareas especificas.
 *
 * @version             1.0
 *
 * @author              Dyson Arley Parra Tilano <dysontilano@gmail.com>
 * Copyright (C) Dyson Parra
 *
 * @History v1.0 --- La implementacion de {AutomatFrame} fue realizada el 31/07/2022.
 * @Dev - La primera version de {AutomatFrame} fue escrita por Dyson A. Parra T.
 */
package com.project.dev.frame;

import com.project.dev.automat.Automat;
import com.project.dev.automat.operation.AutomatOperator;
import javax.swing.JOptionPane;

/**
 * TODO: Definición de {@code AutomatFrame}.
 *
 * @author Dyson Parra
 * @since 1.8
 */
//@AllArgsConstructor
//@Builder
//@Data
//@NoArgsConstructor
public class AutomatFrame extends javax.swing.JFrame {

    private Automat automat;                                                    // Automata finito asociado a la ventana.

    /**
     * TODO: Definición de {@code getAutomat}.
     *
     * @return
     */
    public Automat getAutomat() {
        return automat;
    }

    /**
     * TODO: Definición de {@code setAutomat}.
     *
     * @param automat
     */
    public void setAutomat(Automat automat) {
        this.automat = automat;
    }

    /**
     * TODO: Definición de {@code AutomatFrame}.
     *
     */
    public AutomatFrame() {
        initComponents();

        // Escribe que se ha creado el automata finito.
        //JOptionPane.showMessageDialog(null, "Se ha creado el automata");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainFile = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemRecognize = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        jMenuItemEndSequence = new javax.swing.JMenuItem();
        jMenuItemNullSequence = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        jMenuItemViewCharacter = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jMenuFile.setText("Archivo");

        jMenuItemRecognize.setText("Reconocer hilera");
        jMenuItemRecognize.addActionListener(this::jMenuItemRecognizeActionPerformed);
        jMenuFile.add(jMenuItemRecognize);

        MainFile.add(jMenuFile);

        menuEdit.setText("Editar");

        jMenuItemEndSequence.setText("Escoger caracter de fin de secuencia");
        jMenuItemEndSequence.addActionListener(this::jMenuItemEndSequenceActionPerformed);
        menuEdit.add(jMenuItemEndSequence);

        jMenuItemNullSequence.setText("Escoger caracter de secuencia nula");
        jMenuItemNullSequence.addActionListener(this::jMenuItemNullSequenceActionPerformed);
        menuEdit.add(jMenuItemNullSequence);

        MainFile.add(menuEdit);

        menuView.setText("Ver");

        jMenuItemViewCharacter.setText("Caracteres reservados");
        jMenuItemViewCharacter.addActionListener(this::jMenuItemViewCharacterActionPerformed);
        menuView.add(jMenuItemViewCharacter);

        MainFile.add(menuView);

        setJMenuBar(MainFile);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * TODO: Definición de {@code jMenuItemRecognizeActionPerformed}.
     *
     * @param evt
     */
    private void jMenuItemRecognizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRecognizeActionPerformed
        String value = JOptionPane.showInputDialog(this, "Escriba la hilera", "Reconocer hilera", WIDTH);

        //System.out.printf("'%s'\n", value);
        if (value != null)
            if (value.isEmpty())
                JOptionPane.showMessageDialog(this, "Escriba una hilera primero.");
            else {
                int result = AutomatOperator.valiadteString(automat, value);
                //System.out.printf("Result is: %d/%d\n", result, value.length());

                if (result == -1)
                    JOptionPane.showMessageDialog(this, "La hilera debe tener almenos dos caracteres.");
                else if (result == -2)
                    JOptionPane.showMessageDialog(this, "La hilera debe terminar en el caracter de fin de secuencia.");
                else if (result != value.length())
                    JOptionPane.showMessageDialog(this, "No es posible reconocer la hilera indicada.");
                else
                    JOptionPane.showMessageDialog(this, "La hilera indicada fue reconocida exitosamente.");
            }
    }//GEN-LAST:event_jMenuItemRecognizeActionPerformed

    /**
     * TODO: Definición de {@code jMenuItemEndSequenceActionPerformed}.
     *
     * @param evt
     */
    private void jMenuItemEndSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEndSequenceActionPerformed
        String value = JOptionPane.showInputDialog(this, "Fin de secuencia", "Escriba simbolo de fin de secuencia", WIDTH);
        if (value != null)
            if (value.length() != 1)
                JOptionPane.showMessageDialog(this, "Escriba un caracter valido.");
            else {
                if (automat.getInputSymbols().get(value) != null)
                    JOptionPane.showMessageDialog(this, "Escoja un caracter diferente a los simbolos de entrada del automata.");
                else {
                    automat.setEndSequence(value);
                    JOptionPane.showMessageDialog(this, "Se ha escogido '" + value + "' como fin de secuencia");
                }
            }
    }//GEN-LAST:event_jMenuItemEndSequenceActionPerformed

    /**
     * TODO: Definición de {@code jMenuItemNullSequenceActionPerformed}.
     *
     * @param evt
     */
    private void jMenuItemNullSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNullSequenceActionPerformed
        String value = JOptionPane.showInputDialog(this, "Secuencia nula", "Escriba simbolo de secuencia nula", WIDTH);
        if (value != null)
            if (value.length() != 1)
                JOptionPane.showMessageDialog(this, "Escriba un caracter valido.");
            else {
                if (automat.getInputSymbols().get(automat.getNullSequence()) != null) {          // Si el automata solo reconoce la secuencia nula.
                    System.out.println("no");
                } else if (automat.getInputSymbols().get(value) != null)
                    JOptionPane.showMessageDialog(this, "Escoja un caracter diferente a los simbolos de entrada del automata.");
                else {
                    automat.setNullSequence(value);
                    JOptionPane.showMessageDialog(this, "Se ha escogido '" + value + "' como secuencia nula");
                }
            }
    }//GEN-LAST:event_jMenuItemNullSequenceActionPerformed

    /**
     * TODO: Definición de {@code jMenuItemViewCharacterActionPerformed}.
     *
     * @param evt
     */
    private void jMenuItemViewCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewCharacterActionPerformed
        JOptionPane.showMessageDialog(null,
                "Caracteres en el automata:\n"
                + automat.getNullSequence() + "    Indica secuencia nula.\n"
                + automat.getEndSequence() + "    Indica fin de secuencia.\n"
        );
    }//GEN-LAST:event_jMenuItemViewCharacterActionPerformed

    /**
     * Entrada principal del sistema.
     *
     * @param args argumentos de la linea de comandos.
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AutomatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AutomatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AutomatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AutomatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(() -> {
            new AutomatFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MainFile;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemEndSequence;
    private javax.swing.JMenuItem jMenuItemNullSequence;
    private javax.swing.JMenuItem jMenuItemRecognize;
    private javax.swing.JMenuItem jMenuItemViewCharacter;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuView;
    // End of variables declaration//GEN-END:variables
}
